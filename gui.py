#!/usr/bin/env python
# -*- coding: ANSI_X3.4-1968 -*-
#
# generated by wxGlade 0.6.8 on Wed Apr 22 11:06:24 2015
#

import wx
import socket, sys
from struct import *
# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.button_1 = wx.Button(self, wx.ID_ANY, _("Start"))
        self.listbox = wx.ListBox(self, wx.ID_ANY, choices=[])

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.startButton, self.button_1)
        self.Bind(wx.EVT_LISTBOX, self.listBoxHandler, self.listbox)
        # end wxGlade
        
    
    def startAnalyzer(self):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
        except socket.error , msg:
            print 'Socket could not be created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
            sys.exit()
 
    # receive a packet
        while True:
            packet = s.recvfrom(65565)
             
            #packet string from tuple
            packet = packet[0]
             
            #take first 20 characters for the ip header
            ip_header = packet[0:20]
             
            #now unpack them :)
            iph = unpack('!BBHHHBBH4s4s' , ip_header)
             
            version_ihl = iph[0]
            version = version_ihl >> 4
            ihl = version_ihl & 0xF
             
            iph_length = ihl * 4
             
            ttl = iph[5]
            protocol = iph[6]
            s_addr = socket.inet_ntoa(iph[8]);
            d_addr = socket.inet_ntoa(iph[9]);
             
            self.listbox.Append("Welcome to the Network Protocol Analyzer")
            header = 'Version : ' + str(version) + ' IP Header Length : ' + str(ihl) + ' TTL : ' + str(ttl) + ' Protocol : ' + str(protocol) + ' Source Address : ' + str(s_addr) + ' Destination Address : ' + str(d_addr)
            self.listbox.Append(header)
             
            tcp_header = packet[iph_length:iph_length+20]
             
            #now unpack them :)
            tcph = unpack('!HHLLBBHHH' , tcp_header)
             
            source_port = tcph[0]
            dest_port = tcph[1]
            sequence = tcph[2]
            acknowledgement = tcph[3]
            doff_reserved = tcph[4]
            tcph_length = doff_reserved >> 4
             
            port_info = 'Source Port : ' + str(source_port) + ' Dest Port : ' + str(dest_port) + ' Sequence Number : ' + str(sequence) + ' Acknowledgement : ' + str(acknowledgement) + ' TCP header length : ' + str(tcph_length)
            self.listbox.Append(port_info)
             
            h_size = iph_length + tcph_length * 4
            data_size = len(packet) - h_size
             
            #get data from the packet
            data = packet[h_size:]
             
            self.listbox.Append('Data : ' + data)
            self.listbox.Append(' ')

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("frame_1"))
        self.button_1.SetMinSize((90, 42))
        self.listbox.SetMinSize((534, 340))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_1.Add(self.listbox, 0, 0, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def startButton(self, event):
        print "Calling startAnalyzer"
        self.startAnalyzer()

    def listBoxHandler(self, event):  # wxGlade: MyFrame.<event_handler>
        print "Event handler 'listBoxHandler' not implemented!"
        event.Skip()

# end of class MyFrame
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, wx.ID_ANY, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
